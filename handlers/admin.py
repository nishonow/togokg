from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton
import asyncio
from config import ADMINS
from core.db import get_user_ids, count_users, count_users_last_24h, get_all_ratings, get_users_with_ratings
from loader import dp, bot
from datetime import datetime
import pytz

menu = ReplyKeyboardMarkup(resize_keyboard=True)
menu.add(KeyboardButton(text='üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'))
menu.add(KeyboardButton(text='üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'))
menu.add(KeyboardButton(text='‚≠ê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ü–µ–Ω–∫—É'))

cancel = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data='no')]
    ]
)

ratings_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üëÄ –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ü–µ–Ω–∫–∏", callback_data="see_ratings:0")]
    ]
)

confirm_broadcast = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_broadcast"),
         InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_broadcast")]
    ]
)

USERS_PER_PAGE = 20

@dp.message_handler(user_id=ADMINS, text='/admin')
async def welcome_admin(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=menu)

@dp.message_handler(user_id=ADMINS, text='‚≠ê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ü–µ–Ω–∫—É')
async def show_ratings(message: types.Message):
    all_ratings = await get_all_ratings()
    average = sum(all_ratings) / len(all_ratings) if all_ratings else 0
    formatted_average = f"{average:.2f}"
    await message.answer(f"üìä –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {formatted_average} ‚≠ê\n"
                         f"üìà –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {len(all_ratings)}",
                         reply_markup=ratings_button)

@dp.callback_query_handler(lambda c: c.data.startswith("see_ratings"))
async def handle_see_ratings(callback: CallbackQuery):
    page = int(callback.data.split(":")[1])
    users_with_ratings = await get_users_with_ratings()
    if not users_with_ratings:
        await callback.message.edit_text("üòï –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ü–µ–Ω–∫–∞–º–∏.")
        return

    total_users = len(users_with_ratings)
    total_pages = (total_users + USERS_PER_PAGE - 1) // USERS_PER_PAGE
    start_idx = page * USERS_PER_PAGE
    end_idx = min(start_idx + USERS_PER_PAGE, total_users)
    paginated_users = users_with_ratings[start_idx:end_idx]

    response = f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –æ—Ü–µ–Ω–∫–∞–º–∏ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):\n\n"
    for telegram_id, name, rating in paginated_users:
        user_link = f"tg://user?id={telegram_id}"
        response += f"[{name}]({user_link}) - {rating} ‚≠ê\n"

    nav_buttons = [
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"see_ratings:{page - 1}") if page > 0 else None,
        InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"see_ratings:{page + 1}") if page < total_pages - 1 else None
    ]
    nav_buttons = [btn for btn in nav_buttons if btn]
    back_button = [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_ratings")]

    pagination_keyboard = InlineKeyboardMarkup(inline_keyboard=[nav_buttons, back_button])
    await callback.message.edit_text(response, reply_markup=pagination_keyboard, parse_mode="Markdown",
                                     disable_web_page_preview=True)

@dp.callback_query_handler(text="back_to_ratings")
async def handle_back_to_ratings(callback: CallbackQuery):
    all_ratings = await get_all_ratings()
    average = sum(all_ratings) / len(all_ratings) if all_ratings else 0
    formatted_average = f"{average:.2f}"
    await callback.message.edit_text(f"üìä –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {formatted_average} ‚≠ê\n"
                                     f"üìà –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {len(all_ratings)}",
                                     reply_markup=ratings_button)

@dp.message_handler(user_id=ADMINS, text='üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
async def get_users_count(message: types.Message):
    total_users = await count_users()
    last_24h_users = await count_users_last_24h()
    timestamp = datetime.now(pytz.timezone('Asia/Bishkek')).strftime('%H:%M:%S %d.%m.%Y')
    await message.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
                         f"üë• –í—Å–µ–≥–æ: {total_users}\n"
                         f"üÜï –ù–æ–≤—ã—Ö –∑–∞ 24 —á–∞—Å–∞: {last_24h_users}\n"
                         f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}",)


@dp.message_handler(user_id=ADMINS, text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
async def msg_all(message: types.Message, state: FSMContext):
    message_send = await message.answer(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n–ù–∞–∂–º–∏—Ç–µ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=cancel)
    await state.set_state('msg_all')
    await state.update_data(prompt_msg_id=message_send.message_id)

@dp.callback_query_handler(text='no', state='msg_all')
async def no_msg_all(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("üö´ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.finish()

@dp.message_handler(state='msg_all', content_types=types.ContentTypes.ANY)
async def msg_to_all(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    prompt_msg_id = state_data['prompt_msg_id']
    await bot.edit_message_reply_markup(chat_id=message.from_user.id, message_id=prompt_msg_id, reply_markup=None)
    await state.update_data(msg_id=message.message_id, from_chat=message.chat.id)

    await bot.copy_message(
        chat_id=message.chat.id,
        from_chat_id=message.chat.id,
        message_id=message.message_id
    )
    await message.answer("üëÄ –≠—Ç–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä.\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?", reply_markup=confirm_broadcast)

@dp.callback_query_handler(text="confirm_broadcast", state='msg_all')
async def confirm_broadcast_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    data = await state.get_data()
    msg_id = data['msg_id']
    from_chat = data['from_chat']

    total_users_id = await get_user_ids()
    total = len(total_users_id)
    success = 0
    error = 0

    progress_msg = await callback.message.answer(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: 0/{total}")
    await state.finish()
    for i, user_id in enumerate(total_users_id, 1):
        try:
            await bot.copy_message(chat_id=user_id, from_chat_id=from_chat, message_id=msg_id)
            success += 1
        except Exception:
            error += 1

        if i % 10 == 0 or i == total:
            await bot.edit_message_text(
                f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {success + error}/{total}",
                chat_id=callback.message.chat.id,
                message_id=progress_msg.message_id
            )
        await asyncio.sleep(0.04)

    await callback.message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüì¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {error}")

@dp.callback_query_handler(text="cancel_broadcast", state='msg_all')
async def cancel_broadcast_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("üö´ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.finish()